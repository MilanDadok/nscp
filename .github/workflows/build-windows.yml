name: Build Windows

on:
  push: {}

jobs:
  build-x64:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - id: python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - uses: ilammy/msvc-dev-cmd@v1

    - id: version
      run: |
          python build\python\version.py -f version.txt -a >> $env:GITHUB_OUTPUT
      shell: pwsh

    - name: make dirs
      run: |
        mkdir tmp
        mkdir tmp\nscp
      shell: cmd

    - uses: shogo82148/actions-setup-perl@v1
      with:
        perl-version: '5.34'

    - name: setup python dependencies
      run: |
        pip install mkdocs
        pip install protobuf
        pip install jinja2
        pip install mkdocs-material
        pip install setuptools
        pip install json-protobuf
        pip install lua-protobuf
        pip install md-protobuf      
  
    - name: Download openssl
      run: |
            curl -L https://www.openssl.org/source/openssl-1.1.1q.tar.gz --output openssl.tar.gz
            7z x openssl.tar.gz
            7z x openssl.tar
      working-directory: tmp
  
    - name: Build openssl
      run: |
          perl Configure VC-WIN64A no-asm
          nmake
      working-directory: tmp/openssl-1.1.1q

    - id: openssl_path
      run: |
        $path=$pwd.path
        $path_unix=$pwd.path.replace('\','/')
        echo "path=$path" >> $env:GITHUB_OUTPUT
        echo "path_unix=$path_unix" >> $env:GITHUB_OUTPUT
      shell: pwsh
      working-directory: tmp/openssl-1.1.1q

    - name: Download protobuf
      run: |
            curl -L https://github.com/protocolbuffers/protobuf/releases/download/v21.6/protobuf-all-21.6.zip --output protobuf.zip
            7z x protobuf.zip
      working-directory: tmp
    
    - name: Build protobuf
      run: |
        mkdir build
        cd build
        cmake -DBUILD_SHARED_LIBS=TRUE -G "Visual Studio 17" -A x64 ..

        msbuild libprotobuf.vcxproj /p:Configuration=Release
        msbuild libprotobuf.vcxproj /p:Configuration=Debug
        msbuild libprotoc.vcxproj /p:Configuration=Release
        msbuild protoc.vcxproj /p:Configuration=Release
        msbuild libprotobuf-lite.vcxproj /p:Configuration=Release
      working-directory: tmp/protobuf-21.6
    - id: protobuf_path
      run: |
        $path=$pwd.path
        $path_unix=$pwd.path.replace('\','/')
        echo "path=$path" >> $env:GITHUB_OUTPUT
        echo "path_unix=$path_unix" >> $env:GITHUB_OUTPUT
      shell: pwsh
      working-directory: tmp/protobuf-21.6


    - name: Build Boost
      id: boost
      uses: egor-tensin/build-boost@v1
      with:
        version: 1.79.0
        libraries: system filesystem thread regex date_time program_options python chrono
        platform: x64
        configuration: Release

    - id: paths
      run: |
        $path_unix="${{ steps.boost.outputs.root }}".replace('\','/')
        echo "boost_root=$path_unix" >> $env:GITHUB_OUTPUT
        $path_unix="${{ steps.boost.outputs.librarydir }}".replace('\','/')
        echo "boost_librarydir=$path_unix" >> $env:GITHUB_OUTPUT
        $path_unix="${{ steps.python.outputs.python-path }}".replace('\','/')
        echo "python_path=$path_unix" >> $env:GITHUB_OUTPUT
      shell: pwsh
      working-directory: tmp/protobuf-21.6
        
    - uses: DamianReeves/write-file-action@master
      with:
        path: tmp/nscp/build.cmake
        contents: |
            set(Boost_USE_STATIC_RUNTIME ON)

            SET(USE_STATIC_RUNTIME FALSE)
            SET(LIBRARY_ROOT_FOLDER	"${{ env.GITHUB_WORKSPACE }}")
            SET(BOOST_ROOT "${{ steps.paths.outputs.boost_root }}")
            SET(BOOST_LIBRARYDIR "${{ steps.paths.outputs.boost_librarydir }}")
            SET(PROTOBUF_ROOT "${{ steps.protobuf_path.outputs.path_unix }}")
            SET(PROTOBUF_LIBRARYDIR "${PROTOBUF_ROOT}/build/Release")
            SET(OPENSSL_ROOT_DIR "${{ steps.openssl_path.outputs.path_unix }}")
            SET(LUA_SOURCE_ROOT "${LIBRARY_ROOT_FOLDER}/lua-5.1.5")
            SET(PYTHON_ROOT "${{ steps.path.outputs.python_path }}")
            SET(CRYPTOPP_ROOT "${LIBRARY_ROOT_FOLDER}/CRYPTOPP_8_0_0")

            #SET(CSHARP_DOTNET_VERSION "v4.0.30319")
            #SET(ARCHIVE_FOLDER "TODO")
            #SET(TARGET_SITE "TODO")
  
    - name: CMake nsclient
      working-directory: tmp/nscp
      run: |
        cmake ../.. -G "Visual Studio 17" -A x64

    - name: Build nsclient
      working-directory: tmp/nscp
      run: |
        copy D:\a\nscp\nscp\tmp\protobuf-21.6\build\Release\libprotobuf.dll .
        msbuild NSCP.sln /p:Configuration=Release

    - name: Generate archives
      working-directory: tmp/nscp
      run: |
        echo Running postbuild
        python postbuild.py
        echo Running cpack
        cpack
  
    - uses: actions/upload-artifact@v3
      with:
        name: NSCP-${{ steps.version.outputs.version }}-docs.zip
        path: tmp/nscp/NSCP-${{ steps.version.outputs.version }}-x64-docs.zip
        if-no-files-found: error
    - uses: actions/upload-artifact@v3
      with:
        name: NSCP-${{ steps.version.outputs.version }}-x64.zip
        path: tmp/nscp/NSCP-${{ steps.version.outputs.version }}-x64.zip
        if-no-files-found: error
